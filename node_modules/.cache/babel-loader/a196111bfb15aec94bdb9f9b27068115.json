{"ast":null,"code":"var _jsxFileName = \"/Users/nghiatq/web-btcn-1612422/src/containers/game.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport actionClick from '../actions/actionClick';\nimport actionChangeSort from '../actions/actionChangeSort';\nimport actionJumpTo from '../actions/actionJumpTo';\nimport Board from '../components/board';\nimport Config from '../constants/configs';\nimport Status from '../components/status';\nimport logo from \"../logo.svg\";\nimport '../css/Game.css';\n\nclass Game extends Component {\n  checkWin(row, col, user, stepNumber) {\n    if (stepNumber === 0) {\n      return null;\n    }\n\n    const attrs = this.props.attrs;\n    const history = attrs.history;\n    const current = history[stepNumber];\n    const squares = current.squares.slice(); // Get coordinates\n\n    let coorX = row;\n    let coorY = col;\n    let countCol = 1;\n    let countRow = 1;\n    let countMainDiagonal = 1;\n    let countSkewDiagonal = 1;\n    let isBlock;\n    const rival = user === Config.xPlayer ? Config.oPlayer : Config.xPlayer; // Check col\n\n    isBlock = true;\n    let winCells = [];\n    coorX -= 1;\n\n    while (coorX >= 0 && squares[coorX][coorY] === user) {\n      countCol += 1;\n      winCells.push([coorX, coorY]);\n      coorX -= 1;\n    }\n\n    if (coorX >= 0 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    coorX = row;\n    winCells.push([coorX, coorY]);\n    coorX += 1;\n\n    while (coorX <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n      countCol += 1;\n      winCells.push([coorX, coorY]);\n      coorX += 1;\n    }\n\n    if (coorX <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    coorX = row;\n    if (isBlock === false && countCol >= 5) return winCells; // Check row\n\n    isBlock = true;\n    winCells = [];\n    coorY -= 1;\n\n    while (coorY >= 0 && squares[coorX][coorY] === user) {\n      countRow += 1;\n      winCells.push([coorX, coorY]);\n      coorY -= 1;\n    }\n\n    if (coorY >= 0 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    coorY = col;\n    winCells.push([coorX, coorY]);\n    coorY += 1;\n\n    while (coorY <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n      countRow += 1;\n      winCells.push([coorX, coorY]);\n      coorY += 1;\n    }\n\n    if (coorY <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    coorY = col;\n    if (isBlock === false && countRow >= 5) return winCells; // Check main diagonal\n\n    isBlock = true;\n    winCells = [];\n    coorX -= 1;\n    coorY -= 1;\n\n    while (coorX >= 0 && coorY >= 0 && squares[coorX][coorY] === user) {\n      countMainDiagonal += 1;\n      winCells.push([coorX, coorY]);\n      coorX -= 1;\n      coorY -= 1;\n    }\n\n    if (coorX >= 0 && coorY >= 0 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    coorX = row;\n    coorY = col;\n    winCells.push([coorX, coorY]);\n    coorX += 1;\n    coorY += 1;\n\n    while (coorX <= Config.brdSize - 1 && coorY <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n      countMainDiagonal += 1;\n      winCells.push([coorX, coorY]);\n      coorX += 1;\n      coorY += 1;\n    }\n\n    if (coorX <= Config.brdSize - 1 && coorY <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    coorX = row;\n    coorY = col;\n    if (isBlock === false && countMainDiagonal >= 5) return winCells; // Check skew diagonal\n\n    isBlock = true;\n    winCells = [];\n    coorX -= 1;\n    coorY += 1;\n\n    while (coorX >= 0 && coorY >= 0 && squares[coorX][coorY] === user) {\n      countSkewDiagonal += 1;\n      winCells.push([coorX, coorY]);\n      coorX -= 1;\n      coorY += 1;\n    }\n\n    if (coorX >= 0 && coorY >= 0 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    coorX = row;\n    coorY = col;\n    winCells.push([coorX, coorY]);\n    coorX += 1;\n    coorY -= 1;\n\n    while (coorX <= Config.brdSize - 1 && coorY <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n      countSkewDiagonal += 1;\n      winCells.push([coorX, coorY]);\n      coorX += 1;\n      coorY -= 1;\n    }\n\n    if (coorX <= Config.brdSize - 1 && coorY <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    if (isBlock === false && countSkewDiagonal >= 5) return winCells;\n    return null;\n  }\n\n  handleClick(row, col) {\n    const actions = this.props.actions;\n    const attrs = this.props.attrs;\n    const stepNumber = attrs.stepNumber;\n    const history = attrs.history;\n    const nextMove = attrs.nextMove;\n    const winCells = attrs.winCells; // It should be named 'curMove'\n\n    const curMove = nextMove;\n    const newHistory = history.slice(0, stepNumber + 1);\n    const current = newHistory[newHistory.length - 1]; // Attention: Slice does not work properly with 2D array\n\n    const squares = JSON.parse(JSON.stringify(current.squares));\n\n    if (winCells == null && squares[row][col] == null) {\n      // Assign value\n      squares[row][col] = curMove;\n\n      const _nextMove = curMove === Config.xPlayer ? Config.oPlayer : Config.xPlayer;\n\n      const _winCells = this.checkWin(row, col, curMove, newHistory.length - 1);\n\n      const _history = newHistory.concat([{\n        x: row,\n        y: col,\n        squares\n      }]); // Call action\n\n\n      actions.actionClick(_history, _nextMove, _winCells);\n    }\n  }\n\n  jumpTo(stepNumber) {\n    const actions = this.props.actions;\n    const attrs = this.props.attrs;\n    const history = attrs.history;\n    const target = history[stepNumber];\n    const curMove = stepNumber % 2 === 0 ? Config.oPlayer : Config.xPlayer;\n    const nextMove = stepNumber % 2 !== 0 ? Config.oPlayer : Config.xPlayer;\n    const winCells = this.checkWin(target.x, target.y, curMove, stepNumber); // Call action\n\n    actions.actionJumpTo(stepNumber, nextMove, winCells);\n  }\n\n  render() {\n    const actions = this.props.actions;\n    const attrs = this.props.attrs;\n    const history = attrs.history;\n    const stepNumber = attrs.stepNumber;\n    const nextMove = attrs.nextMove;\n    const winCells = attrs.winCells;\n    const accendingMode = attrs.accendingMode;\n    const current = history[stepNumber];\n    const sortMode = accendingMode ? \"N\\u01B0\\u1EDBc \\u0111i t\\u0103ng d\\u1EA7n\" : \"N\\u01B0\\u1EDBc \\u0111i gi\\u1EA3m d\\u1EA7n\";\n    const moves = [];\n    history.map((step, move) => {\n      const content = move ? \"\\u0110\\u1EBFn b\\u01B0\\u1EDBc th\\u1EE9 #\".concat(Config.makeTwoDigits(move), \":\\n                (\").concat(Config.makeTwoDigits(history[move].x), \",\\n                \").concat(Config.makeTwoDigits(history[move].y), \")\") : \"Ch\\u01A1i l\\u1EA1i t\\u1EEB \\u0111\\u1EA7u !\";\n      const className = move === stepNumber ? \"board-button-bold\" : \"board-button\"; // Get current move\n\n      const currentMove = // eslint-disable-next-line react/no-array-index-key\n      React.createElement(\"li\", {\n        key: move,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, content)); // Push head or tail depends on sort mode\n\n      if (accendingMode) {\n        moves.push(currentMove);\n      } else {\n        moves.splice(0, 0, currentMove);\n      }\n\n      return moves;\n    });\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }), React.createElement(Status, {\n      nextMove: nextMove,\n      winCells: winCells,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"board-game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"function-button\",\n      onClick: actions.actionChangeSort,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, sortMode)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(Board, {\n      winCells: winCells,\n      squares: current.squares,\n      handleClick: (i, j) => this.handleClick(i, j),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, moves)))));\n  }\n\n} // Connect variables\n\n\nfunction mapStateToProps(state) {\n  return {\n    attrs: state.gameReducers\n  };\n} // Connect functions\n\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators({\n      actionClick,\n      actionChangeSort,\n      actionJumpTo\n    }, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/nghiatq/web-btcn-1612422/src/containers/game.js"],"names":["React","Component","connect","bindActionCreators","actionClick","actionChangeSort","actionJumpTo","Board","Config","Status","Game","checkWin","row","col","user","stepNumber","attrs","props","history","current","squares","slice","coorX","coorY","countCol","countRow","countMainDiagonal","countSkewDiagonal","isBlock","rival","xPlayer","oPlayer","winCells","push","brdSize","handleClick","actions","nextMove","curMove","newHistory","length","JSON","parse","stringify","_nextMove","_winCells","_history","concat","x","y","jumpTo","target","render","accendingMode","sortMode","moves","map","step","move","content","makeTwoDigits","className","currentMove","splice","logo","i","j","mapStateToProps","state","gameReducers","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport actionClick from '../actions/actionClick';\nimport actionChangeSort from '../actions/actionChangeSort';\nimport actionJumpTo from '../actions/actionJumpTo';\nimport Board from '../components/board';\nimport Config from '../constants/configs';\nimport Status from '../components/status';\nimport logo from '../logo.svg';\nimport '../css/Game.css';\n\nclass Game extends Component {\n\n    checkWin(row, col, user, stepNumber) {\n\n        if (stepNumber === 0) {\n            return null;\n        }\n\n        const { attrs } = this.props;\n        const { history } = attrs;\n        const current = history[stepNumber];\n        const squares = current.squares.slice();\n\n        // Get coordinates\n        let coorX = row;\n        let coorY = col;\n \n        let countCol = 1;\n        let countRow = 1;\n        let countMainDiagonal = 1;\n        let countSkewDiagonal = 1;\n        let isBlock;\n        const rival = (user === Config.xPlayer) ? Config.oPlayer : Config.xPlayer;\n \n        // Check col\n        isBlock = true;\n        let winCells = [];\n        coorX -= 1;\n        while(coorX >= 0 && squares[coorX][coorY] === user) {\n            countCol += 1;\n            winCells.push([coorX, coorY]);\n            coorX -= 1;\n        }\n        if (coorX >= 0 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        coorX = row;\n        winCells.push([coorX, coorY]);\n        coorX += 1;\n        while(coorX <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n            countCol += 1;\n            winCells.push([coorX, coorY]);\n            coorX += 1;\n        }\n        if (coorX <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        coorX = row;\n        if (isBlock === false && countCol >= 5) return winCells;\n \n        // Check row\n        isBlock = true;\n        winCells = [];\n        coorY -= 1;\n        while(coorY >= 0 && squares[coorX][coorY] === user) {\n            countRow += 1;\n            winCells.push([coorX, coorY]);\n            coorY -= 1;\n        }\n        if (coorY >= 0 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        coorY = col;\n        winCells.push([coorX, coorY]);\n        coorY += 1;\n        while(coorY <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n            countRow += 1;\n            winCells.push([coorX, coorY]);\n            coorY += 1;\n        }\n        if (coorY <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        coorY = col;\n        if (isBlock === false && countRow >= 5) return winCells;\n\n        // Check main diagonal\n        isBlock = true;\n        winCells = [];\n        coorX -= 1;\n        coorY -= 1;\n        while(coorX >= 0 && coorY >= 0 && squares[coorX][coorY] === user) {\n            countMainDiagonal += 1;\n            winCells.push([coorX, coorY]);\n            coorX -= 1;\n            coorY -= 1;\n        }\n        if (coorX >= 0 && coorY >= 0 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        coorX = row;\n        coorY = col;\n        winCells.push([coorX, coorY]);\n        coorX += 1;\n        coorY += 1;\n        while(coorX <= Config.brdSize - 1 && coorY <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n            countMainDiagonal += 1;\n            winCells.push([coorX, coorY]);\n            coorX += 1;\n            coorY += 1;\n        }\n        if (coorX <= Config.brdSize - 1 && coorY <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        coorX = row;\n        coorY = col;\n        if (isBlock === false && countMainDiagonal >= 5) return winCells;\n\n        // Check skew diagonal\n        isBlock = true;\n        winCells = [];\n        coorX -= 1;\n        coorY += 1;\n        while(coorX >= 0 && coorY >= 0 && squares[coorX][coorY] === user) {\n            countSkewDiagonal += 1;\n            winCells.push([coorX, coorY]);\n            coorX -= 1;\n            coorY += 1;\n        }\n        if (coorX >= 0 && coorY >= 0 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        coorX = row;\n        coorY = col;\n        winCells.push([coorX, coorY]);\n        coorX += 1;\n        coorY -= 1;\n        while(coorX <= Config.brdSize - 1 && coorY <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n            countSkewDiagonal += 1;\n            winCells.push([coorX, coorY]);\n            coorX += 1;\n            coorY -= 1;\n        }\n        if (coorX <= Config.brdSize - 1 && coorY <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        if (isBlock === false && countSkewDiagonal >= 5) return winCells;\n\n        return null;\n    }\n\n    handleClick(row, col) {\n        const { actions } = this.props\n        const { attrs } = this.props;\n        const { stepNumber } = attrs;\n        const { history } = attrs;\n        const { nextMove } = attrs;\n        const { winCells } = attrs;\n\n        // It should be named 'curMove'\n        const curMove = nextMove;\n        const newHistory = history.slice(0, stepNumber + 1);\n        const current = newHistory[newHistory.length - 1];\n\n        // Attention: Slice does not work properly with 2D array\n        const squares = JSON.parse(JSON.stringify(current.squares));\n\n        if (winCells == null && squares[row][col] == null) {\n\n            // Assign value\n            squares[row][col] = curMove;\n            const _nextMove = curMove === Config.xPlayer ? Config.oPlayer : Config.xPlayer;\n            const _winCells = this.checkWin(row, col, curMove, newHistory.length - 1);\n            const _history  = newHistory.concat([{\n                x: row,\n                y: col,\n                squares\n            }]);\n\n            // Call action\n            actions.actionClick(_history, _nextMove, _winCells);\n        }\n    }\n\n    jumpTo(stepNumber) {\n        const { actions } = this.props\n        const { attrs } = this.props;\n        const { history } = attrs;\n\n        const target = history[stepNumber];\n        const curMove = stepNumber % 2 === 0 ? Config.oPlayer : Config.xPlayer;\n        const nextMove = stepNumber % 2 !== 0 ? Config.oPlayer : Config.xPlayer;\n        const winCells = this.checkWin(target.x, target.y, curMove, stepNumber);\n\n        // Call action\n        actions.actionJumpTo(stepNumber, nextMove, winCells);\n    }\n\n    render() {\n        const { actions } = this.props\n        const { attrs } = this.props;\n        const { history } = attrs;\n        const { stepNumber } = attrs;\n        const { nextMove } = attrs;\n        const { winCells } = attrs;\n        const { accendingMode } = attrs;\n\n        const current = history[stepNumber];\n\n        const sortMode = accendingMode ? `Nước đi tăng dần` : `Nước đi giảm dần`;\n        const moves = [];\n\n        history.map((step, move) => {\n            const content = move ? `Đến bước thứ #${\n                Config.makeTwoDigits(move)}:\n                (${Config.makeTwoDigits(history[move].x)},\n                ${  Config.makeTwoDigits(history[move].y)})`\n            : `Chơi lại từ đầu !`;\n            const className = (move === stepNumber) ? `board-button-bold` : `board-button`;\n            \n            // Get current move\n            const currentMove = (\n                // eslint-disable-next-line react/no-array-index-key\n                <li key={move}>\n                    <button type='button' className={className}>{content}</button>\n                </li>\n            )\n\n            // Push head or tail depends on sort mode\n            if (accendingMode) {\n                moves.push(currentMove);\n            }\n            else {\n                moves.splice(0, 0, currentMove);\n            }\n\n            return moves;\n        })\n\n        return (\n            <div className='App'>\n\t\t\t\t<header className='App-header'>\n                    <img src={logo} className='App-logo' alt='logo' />\n\t\t\t\t\t<Status nextMove={nextMove} winCells={winCells} />\n                    <div className='board-game'>\n                        <button type='button' className='function-button' onClick={actions.actionChangeSort}><b>{sortMode}</b></button>\n                        <div>\n                            <Board  winCells={winCells}\n                                    squares={current.squares}\n                                    handleClick={(i, j) => this.handleClick(i, j)}/>\n                        </div>\n                        <div>\n                            <ol>{moves}</ol>\n                        </div>\n                    </div>\n\t\t\t\t</header>\n            </div>\n        );\n    }\n}\n\n// Connect variables\nfunction mapStateToProps(state) {\n    return {\n        attrs: state.gameReducers\n    };\n}\n\n// Connect functions\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            actionClick,\n            actionChangeSort,\n            actionJumpTo\n        }, dispatch)\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);"]},"metadata":{},"sourceType":"module"}