{"ast":null,"code":"var _jsxFileName = \"/Users/nghiatq/web-btcn-1612422/src/containers/game.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport actionChangeSort from '../actions/actionChangeSort';\nimport Board from '../components/board';\nimport Config from '../constants/configs';\nimport Status from '../components/status';\nimport '../css/Game.css';\nimport logo from \"../logo.svg\";\n\nclass Game extends Component {\n  checkWin(row, col, user, step) {\n    if (step === 0) {\n      return null;\n    }\n\n    const history = this.state.history;\n    const current = history[step];\n    const squares = current.squares.slice(); // Get coordinates\n\n    let coorX = row;\n    let coorY = col;\n    let countCol = 1;\n    let countRow = 1;\n    let countMainDiagonal = 1;\n    let countSkewDiagonal = 1;\n    let isBlock;\n    const rival = user === Config.xPlayer ? Config.oPlayer : Config.xPlayer; // Check col\n\n    isBlock = true;\n    let winCells = [];\n    coorX -= 1;\n\n    while (coorX >= 0 && squares[coorX][coorY] === user) {\n      countCol += 1;\n      winCells.push([coorX, coorY]);\n      coorX -= 1;\n    }\n\n    if (coorX >= 0 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    coorX = row;\n    winCells.push([coorX, coorY]);\n    coorX += 1;\n\n    while (coorX <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n      countCol += 1;\n      winCells.push([coorX, coorY]);\n      coorX += 1;\n    }\n\n    if (coorX <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    coorX = row;\n    if (isBlock === false && countCol >= 5) return winCells; // Check row\n\n    isBlock = true;\n    winCells = [];\n    coorY -= 1;\n\n    while (coorY >= 0 && squares[coorX][coorY] === user) {\n      countRow += 1;\n      winCells.push([coorX, coorY]);\n      coorY -= 1;\n    }\n\n    if (coorY >= 0 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    coorY = col;\n    winCells.push([coorX, coorY]);\n    coorY += 1;\n\n    while (coorY <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n      countRow += 1;\n      winCells.push([coorX, coorY]);\n      coorY += 1;\n    }\n\n    if (coorY <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    coorY = col;\n    if (isBlock === false && countRow >= 5) return winCells; // Check main diagonal\n\n    isBlock = true;\n    winCells = [];\n    coorX -= 1;\n    coorY -= 1;\n\n    while (coorX >= 0 && coorY >= 0 && squares[coorX][coorY] === user) {\n      countMainDiagonal += 1;\n      winCells.push([coorX, coorY]);\n      coorX -= 1;\n      coorY -= 1;\n    }\n\n    if (coorX >= 0 && coorY >= 0 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    coorX = row;\n    coorY = col;\n    winCells.push([coorX, coorY]);\n    coorX += 1;\n    coorY += 1;\n\n    while (coorX <= Config.brdSize - 1 && coorY <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n      countMainDiagonal += 1;\n      winCells.push([coorX, coorY]);\n      coorX += 1;\n      coorY += 1;\n    }\n\n    if (coorX <= Config.brdSize - 1 && coorY <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    coorX = row;\n    coorY = col;\n    if (isBlock === false && countMainDiagonal >= 5) return winCells; // Check skew diagonal\n\n    isBlock = true;\n    winCells = [];\n    coorX -= 1;\n    coorY += 1;\n\n    while (coorX >= 0 && coorY >= 0 && squares[coorX][coorY] === user) {\n      countSkewDiagonal += 1;\n      winCells.push([coorX, coorY]);\n      coorX -= 1;\n      coorY += 1;\n    }\n\n    if (coorX >= 0 && coorY >= 0 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    coorX = row;\n    coorY = col;\n    winCells.push([coorX, coorY]);\n    coorX += 1;\n    coorY -= 1;\n\n    while (coorX <= Config.brdSize - 1 && coorY <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n      countSkewDiagonal += 1;\n      winCells.push([coorX, coorY]);\n      coorX += 1;\n      coorY -= 1;\n    }\n\n    if (coorX <= Config.brdSize - 1 && coorY <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    if (isBlock === false && countSkewDiagonal >= 5) return winCells;\n    return null;\n  }\n\n  handleClick(row, col) {\n    const stepNumber = this.state.stepNumber;\n    const history = this.state.history;\n    const newHistory = history.slice(0, stepNumber + 1);\n    const current = newHistory[newHistory.length - 1]; // Attention: Slice does not work properly with 2D array\n\n    const squares = JSON.parse(JSON.stringify(current.squares)); // It should be named 'curMove'\n\n    const nextMove = this.state.nextMove;\n    const winCells = this.state.winCells;\n    const curMove = nextMove;\n\n    if (winCells == null && squares[row][col] == null) {\n      // Assign value\n      squares[row][col] = curMove;\n      this.setState({\n        history: newHistory.concat([{\n          x: row,\n          y: col,\n          squares\n        }]),\n        stepNumber: newHistory.length,\n        nextMove: curMove === Config.xPlayer ? Config.oPlayer : Config.xPlayer,\n        winCells: this.checkWin(row, col, curMove, newHistory.length - 1)\n      });\n    }\n  } // jumpTo(step)\n  // {\n  //     const {history} = this.state;\n  //     const target = history[step];\n  //     const curMove = step % 2 === 0 ? Config.oPlayer : Config.xPlayer;\n  //     const nextMove = step % 2 !== 0 ? Config.oPlayer : Config.xPlayer;\n  //     this.setState({\n  //         stepNumber: step,\n  //         nextMove,\n  //         winCells: this.checkWin(target.x, target.y, curMove, step)\n  //     })\n  // }\n\n\n  render() {\n    const actions = this.props.actions;\n    const attrs = this.props.attrs;\n    const history = attrs.history;\n    const stepNumber = attrs.stepNumber;\n    const nextMove = attrs.nextMove;\n    const winCells = attrs.winCells;\n    const accendingMode = attrs.accendingMode;\n    const current = history[stepNumber];\n    const moves = [];\n    history.map((step, move) => {\n      const content = move ? \"\\u0110\\u1EBFn b\\u01B0\\u1EDBc th\\u1EE9 #\".concat(Config.makeTwoDigits(move), \":\\n                (\").concat(Config.makeTwoDigits(history[move].x), \",\\n                \").concat(Config.makeTwoDigits(history[move].y), \")\") : \"Ch\\u01A1i l\\u1EA1i t\\u1EEB \\u0111\\u1EA7u !\";\n      const className = move === stepNumber ? \"board-button-bold\" : \"board-button\"; // Get current move\n\n      const currentMove = React.createElement(\"li\", {\n        key: move,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, content)); // Push head or tail depends on sort mode\n\n      if (accendingMode) {\n        moves.push(currentMove);\n      } else {\n        moves.splice(0, 0, currentMove);\n      }\n\n      return moves;\n    });\n    const sortMode = attrs.accendingMode ? \"N\\u01B0\\u1EDBc \\u0111i t\\u0103ng d\\u1EA7n\" : \"N\\u01B0\\u1EDBc \\u0111i gi\\u1EA3m d\\u1EA7n\";\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(Status, {\n      nextMove: nextMove,\n      winCells: winCells,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"board-game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"function-button\",\n      onClick: actions.actionChangeSort,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, sortMode)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(Board, {\n      winCells: winCells,\n      squares: current.squares,\n      handleClick: (i, j) => this.handleClick(i, j),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, moves)))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    attrs: state.gameReducers\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators({\n      actionChangeSort\n    }, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/nghiatq/web-btcn-1612422/src/containers/game.js"],"names":["React","Component","connect","bindActionCreators","actionChangeSort","Board","Config","Status","Game","checkWin","row","col","user","step","history","state","current","squares","slice","coorX","coorY","countCol","countRow","countMainDiagonal","countSkewDiagonal","isBlock","rival","xPlayer","oPlayer","winCells","push","brdSize","handleClick","stepNumber","newHistory","length","JSON","parse","stringify","nextMove","curMove","setState","concat","x","y","render","actions","props","attrs","accendingMode","moves","map","move","content","makeTwoDigits","className","currentMove","splice","sortMode","logo","i","j","mapStateToProps","gameReducers","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport actionChangeSort from '../actions/actionChangeSort';\nimport Board from '../components/board';\nimport Config from '../constants/configs';\nimport Status from '../components/status';\nimport '../css/Game.css';\nimport logo from '../logo.svg';\n\nclass Game extends Component {\n\n    checkWin(row, col, user, step) {\n\n        if (step === 0) {\n            return null;\n        }\n\n        const {history} = this.state;\n        const current = history[step];\n        const squares = current.squares.slice();\n\n        // Get coordinates\n        let coorX = row;\n        let coorY = col;\n \n        let countCol = 1;\n        let countRow = 1;\n        let countMainDiagonal = 1;\n        let countSkewDiagonal = 1;\n        let isBlock;\n        const rival = (user === Config.xPlayer) ? Config.oPlayer : Config.xPlayer;\n \n        // Check col\n        isBlock = true;\n        let winCells = [];\n        coorX -= 1;\n        while(coorX >= 0 && squares[coorX][coorY] === user) {\n            countCol += 1;\n            winCells.push([coorX, coorY]);\n            coorX -= 1;\n        }\n        if (coorX >= 0 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        coorX = row;\n        winCells.push([coorX, coorY]);\n        coorX += 1;\n        while(coorX <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n            countCol += 1;\n            winCells.push([coorX, coorY]);\n            coorX += 1;\n        }\n        if (coorX <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        coorX = row;\n        if (isBlock === false && countCol >= 5) return winCells;\n \n        // Check row\n        isBlock = true;\n        winCells = [];\n        coorY -= 1;\n        while(coorY >= 0 && squares[coorX][coorY] === user) {\n            countRow += 1;\n            winCells.push([coorX, coorY]);\n            coorY -= 1;\n        }\n        if (coorY >= 0 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        coorY = col;\n        winCells.push([coorX, coorY]);\n        coorY += 1;\n        while(coorY <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n            countRow += 1;\n            winCells.push([coorX, coorY]);\n            coorY += 1;\n        }\n        if (coorY <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        coorY = col;\n        if (isBlock === false && countRow >= 5) return winCells;\n\n        // Check main diagonal\n        isBlock = true;\n        winCells = [];\n        coorX -= 1;\n        coorY -= 1;\n        while(coorX >= 0 && coorY >= 0 && squares[coorX][coorY] === user) {\n            countMainDiagonal += 1;\n            winCells.push([coorX, coorY]);\n            coorX -= 1;\n            coorY -= 1;\n        }\n        if (coorX >= 0 && coorY >= 0 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        coorX = row;\n        coorY = col;\n        winCells.push([coorX, coorY]);\n        coorX += 1;\n        coorY += 1;\n        while(coorX <= Config.brdSize - 1 && coorY <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n            countMainDiagonal += 1;\n            winCells.push([coorX, coorY]);\n            coorX += 1;\n            coorY += 1;\n        }\n        if (coorX <= Config.brdSize - 1 && coorY <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        coorX = row;\n        coorY = col;\n        if (isBlock === false && countMainDiagonal >= 5) return winCells;\n\n        // Check skew diagonal\n        isBlock = true;\n        winCells = [];\n        coorX -= 1;\n        coorY += 1;\n        while(coorX >= 0 && coorY >= 0 && squares[coorX][coorY] === user) {\n            countSkewDiagonal += 1;\n            winCells.push([coorX, coorY]);\n            coorX -= 1;\n            coorY += 1;\n        }\n        if (coorX >= 0 && coorY >= 0 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        coorX = row;\n        coorY = col;\n        winCells.push([coorX, coorY]);\n        coorX += 1;\n        coorY -= 1;\n        while(coorX <= Config.brdSize - 1 && coorY <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n            countSkewDiagonal += 1;\n            winCells.push([coorX, coorY]);\n            coorX += 1;\n            coorY -= 1;\n        }\n        if (coorX <= Config.brdSize - 1 && coorY <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        if (isBlock === false && countSkewDiagonal >= 5) return winCells;\n\n        return null;\n    }\n\n    handleClick(row, col) {      \n        const { stepNumber } = this.state;\n        const { history } = this.state;\n        const newHistory = history.slice(0, stepNumber + 1);\n        const current = newHistory[newHistory.length - 1];\n\n        // Attention: Slice does not work properly with 2D array\n        const squares = JSON.parse(JSON.stringify(current.squares));\n\n        // It should be named 'curMove'\n        const { nextMove } = this.state;\n        const { winCells } = this.state;\n        const curMove = nextMove;\n\n        if (winCells == null && squares[row][col] == null) {\n\n            // Assign value\n            squares[row][col] = curMove;\n\n            this.setState({\n                history: newHistory.concat([{\n                    x: row,\n                    y: col,\n                    squares\n                }]),\n                stepNumber: newHistory.length,\n                nextMove: (curMove === Config.xPlayer) ? Config.oPlayer : Config.xPlayer,\n                winCells: this.checkWin(row, col, curMove, newHistory.length - 1)\n            });\n        }\n    }\n\n    // jumpTo(step)\n    // {\n    //     const {history} = this.state;\n    //     const target = history[step];\n    //     const curMove = step % 2 === 0 ? Config.oPlayer : Config.xPlayer;\n    //     const nextMove = step % 2 !== 0 ? Config.oPlayer : Config.xPlayer;\n\n    //     this.setState({\n    //         stepNumber: step,\n    //         nextMove,\n    //         winCells: this.checkWin(target.x, target.y, curMove, step)\n    //     })\n    // }\n\n    render() {\n        const { actions } = this.props\n        const { attrs } = this.props;\n        const { history } = attrs;\n        const { stepNumber } = attrs;\n        const { nextMove } = attrs;\n        const { winCells } = attrs;\n        const { accendingMode } = attrs;\n        const current = history[stepNumber];\n\n        const moves = [];\n        history.map((step, move) => {\n            const content = move ? `Đến bước thứ #${\n                Config.makeTwoDigits(move)}:\n                (${Config.makeTwoDigits(history[move].x)},\n                ${  Config.makeTwoDigits(history[move].y)})`\n            : `Chơi lại từ đầu !`;\n            const className = (move === stepNumber) ? `board-button-bold` : `board-button`;\n            \n            // Get current move\n            const currentMove = (\n                <li key={move}>\n                    <button type='button' className={className}>{content}</button>\n                </li>\n            )\n\n            // Push head or tail depends on sort mode\n            if (accendingMode) {\n                moves.push(currentMove);\n            }\n            else {\n                moves.splice(0, 0, currentMove);\n            }\n\n            return moves;\n        })\n\n        const sortMode = attrs.accendingMode ? `Nước đi tăng dần` : `Nước đi giảm dần`;\n\n        return (\n            <div className='App'>\n\t\t\t\t<header className='App-header'>\n                    <img src={logo} className='App-logo' alt='logo' />\n\t\t\t\t\t<Status nextMove={nextMove} winCells={winCells} />\n                    <div className='board-game'>\n                        <button type='button' className='function-button' onClick={actions.actionChangeSort}><b>{sortMode}</b></button>\n                        <div>\n                            <Board  winCells={winCells}\n                                    squares={current.squares}\n                                    handleClick={(i, j) => this.handleClick(i, j)}/>\n                        </div>\n                        <div>\n                            <ol>{moves}</ol>\n                        </div>\n                    </div>\n\t\t\t\t</header>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        attrs: state.gameReducers\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            actionChangeSort\n        }, dispatch)\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);"]},"metadata":{},"sourceType":"module"}