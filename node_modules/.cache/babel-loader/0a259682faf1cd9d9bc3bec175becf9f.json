{"ast":null,"code":"var _jsxFileName = \"/Users/nghiatq/OneDrive - VNG Corporation/Study/Git/WEB/btcn04/Source/src/Game.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport Status from './Status';\nimport Config from './Config';\nimport Board from './Board';\nimport './css/Game.css';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        x: null,\n        y: null,\n        squares: Array(Config.brdSize).fill(null).map(a => {\n          return Array(Config.brdSize).fill(null);\n        })\n      }],\n      nextMove: Config.xPlayer,\n      stepNumber: 0,\n      winCells: null,\n      accendingMode: true\n    };\n  }\n\n  render() {\n    const history = this.state.history;\n    const stepNumber = this.state.stepNumber;\n    const current = history[stepNumber];\n    const nextMove = this.state.nextMove;\n    const winCells = this.state.winCells;\n    let moves = [];\n    history.map((step, move) => {\n      const content = move ? \"\\u0110\\u1EBFn b\\u01B0\\u1EDBc th\\u1EE9 #\".concat(Config.makeTwoDigits(move), \": (\").concat(Config.makeTwoDigits(history[move].x), \", \").concat(Config.makeTwoDigits(history[move].y), \")\") : \"Chơi lại từ đầu !\";\n      const className = move == stepNumber ? \"board-button-bold\" : \"board-button\"; // Get current move\n\n      let current = React.createElement(\"li\", {\n        key: move,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: () => this.jumpTo(move),\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, content)); // Push head or tail depends on sort mode\n\n      if (this.state.accendingMode) {\n        moves.push(current);\n      } else {\n        moves.splice(0, 0, current);\n      }\n    });\n    const sortMode = this.state.accendingMode ? \"Nước đi tăng dần\" : \"Nước đi giảm dần\";\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(Status, {\n      nextMove: nextMove,\n      winCells: winCells,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"board-game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"function-button\",\n      onClick: () => this.changeSortMode(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, sortMode)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Board, {\n      winCells: winCells,\n      squares: current.squares,\n      handleClick: (i, j) => this.handleClick(i, j),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, moves)))));\n  }\n\n  changeSortMode() {\n    this.setState({\n      accendingMode: !this.state.accendingMode\n    });\n  }\n\n  handleClick(row, col) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1]; // Attention: Slice does not work properly with 2D array\n\n    const squares = JSON.parse(JSON.stringify(current.squares)); // It should be named 'curMove'\n\n    const curMove = this.state.nextMove;\n    const winCells = this.state.winCells;\n\n    if (winCells == null && squares[row][col] == null) {\n      // Assign value\n      squares[row][col] = curMove; // Update next move\n\n      let nextMove = curMove === Config.xPlayer ? Config.oPlayer : Config.xPlayer;\n      this.setState({\n        history: history.concat([{\n          x: row,\n          y: col,\n          squares\n        }]),\n        stepNumber: history.length,\n        nextMove,\n        winCells: this.checkWin(row, col, curMove, history.length - 1)\n      });\n    }\n  }\n\n  jumpTo(step) {\n    const history = this.state.history;\n    const target = history[step];\n    const curMove = step % 2 == 0 ? Config.oPlayer : Config.xPlayer;\n    const nextMove = step % 2 != 0 ? Config.oPlayer : Config.xPlayer;\n    this.setState({\n      stepNumber: step,\n      nextMove,\n      winCells: this.checkWin(target.x, target.y, curMove, step)\n    });\n  }\n\n  checkWin(row, col, user, step) {\n    if (step == 0) {\n      return null;\n    }\n\n    const history = this.state.history;\n    const current = history[step];\n    const squares = current.squares.slice(); // Get coordinates\n\n    let coorX = row;\n    let coorY = col;\n    let countCol = 1;\n    let countRow = 1;\n    let countMainDiagonal = 1;\n    let countSkewDiagonal = 1;\n    let isBlock;\n    let rival = user === Config.xPlayer ? Config.oPlayer : Config.xPlayer; // Check col\n\n    isBlock = true;\n    let win_cells = [];\n\n    while (--coorX >= 0 && squares[coorX][coorY] === user) {\n      countCol++;\n      win_cells.push([coorX, coorY]);\n    }\n\n    if (coorX >= 0 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    coorX = row;\n    win_cells.push([coorX, coorY]);\n\n    while (++coorX <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n      countCol++;\n      win_cells.push([coorX, coorY]);\n    }\n\n    if (coorX <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    coorX = row;\n    if (isBlock === false && countCol >= 5) return win_cells; // Check row\n\n    isBlock = true;\n    win_cells = [];\n\n    while (--coorY >= 0 && squares[coorX][coorY] === user) {\n      countRow++;\n      win_cells.push([coorX, coorY]);\n    }\n\n    if (coorY >= 0 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    coorY = col;\n    win_cells.push([coorX, coorY]);\n\n    while (++coorY <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n      countRow++;\n      win_cells.push([coorX, coorY]);\n    }\n\n    if (coorY <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    coorY = col;\n    if (isBlock === false && countRow >= 5) return win_cells; // Check main diagonal\n\n    isBlock = true;\n    win_cells = [];\n\n    while (--coorX >= 0 && --coorY >= 0 && squares[coorX][coorY] === user) {\n      countMainDiagonal++;\n      win_cells.push([coorX, coorY]);\n    }\n\n    if (coorX >= 0 && coorY >= 0 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    coorX = row;\n    coorY = col;\n    win_cells.push([coorX, coorY]);\n\n    while (++coorX <= Config.brdSize - 1 && ++coorY <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n      countMainDiagonal++;\n      win_cells.push([coorX, coorY]);\n    }\n\n    if (coorX <= Config.brdSize - 1 && coorY <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    coorX = row;\n    coorY = col;\n    if (isBlock === false && countMainDiagonal >= 5) return win_cells; // Check skew diagonal\n\n    isBlock = true;\n    win_cells = [];\n\n    while (--coorX >= 0 && ++coorY >= 0 && squares[coorX][coorY] === user) {\n      countSkewDiagonal++;\n      win_cells.push([coorX, coorY]);\n    }\n\n    if (coorX >= 0 && coorY >= 0 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    coorX = row;\n    coorY = col;\n    win_cells.push([coorX, coorY]);\n\n    while (++coorX <= Config.brdSize - 1 && --coorY <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n      countSkewDiagonal++;\n      win_cells.push([coorX, coorY]);\n    }\n\n    if (coorX <= Config.brdSize - 1 && coorY <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n      isBlock = false;\n    }\n\n    if (isBlock === false && countSkewDiagonal >= 5) return win_cells;\n    return null;\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/nghiatq/OneDrive - VNG Corporation/Study/Git/WEB/btcn04/Source/src/Game.js"],"names":["React","Component","Status","Config","Board","Game","constructor","props","state","history","x","y","squares","Array","brdSize","fill","map","a","nextMove","xPlayer","stepNumber","winCells","accendingMode","render","current","moves","step","move","content","makeTwoDigits","className","jumpTo","push","splice","sortMode","logo","changeSortMode","i","j","handleClick","setState","row","col","slice","length","JSON","parse","stringify","curMove","oPlayer","concat","checkWin","target","user","coorX","coorY","countCol","countRow","countMainDiagonal","countSkewDiagonal","isBlock","rival","win_cells"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,gBAAP;;AAEA,MAAMC,IAAN,SAAmBJ,SAAnB,CAA6B;AACzBK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,CAAC;AACNC,QAAAA,CAAC,EAAE,IADG;AAENC,QAAAA,CAAC,EAAE,IAFG;AAGNC,QAAAA,OAAO,EAAEC,KAAK,CAACV,MAAM,CAACW,OAAR,CAAL,CAAsBC,IAAtB,CAA2B,IAA3B,EAAiCC,GAAjC,CAAqCC,CAAC,IAAI;AAAE,iBAAOJ,KAAK,CAACV,MAAM,CAACW,OAAR,CAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAP;AAAwC,SAApF;AAHH,OAAD,CADA;AAMTG,MAAAA,QAAQ,EAAEf,MAAM,CAACgB,OANR;AAOTC,MAAAA,UAAU,EAAE,CAPH;AAQTC,MAAAA,QAAQ,EAAE,IARD;AASTC,MAAAA,aAAa,EAAE;AATN,KAAb;AAWH;;AAEDC,EAAAA,MAAM,GAAG;AAAA,UACEd,OADF,GACa,KAAKD,KADlB,CACEC,OADF;AAAA,UAEEW,UAFF,GAEgB,KAAKZ,KAFrB,CAEEY,UAFF;AAGL,UAAMI,OAAO,GAAGf,OAAO,CAACW,UAAD,CAAvB;AAHK,UAIEF,QAJF,GAIc,KAAKV,KAJnB,CAIEU,QAJF;AAAA,UAKEG,QALF,GAKc,KAAKb,KALnB,CAKEa,QALF;AAOL,QAAII,KAAK,GAAG,EAAZ;AACAhB,IAAAA,OAAO,CAACO,GAAR,CAAY,CAACU,IAAD,EAAOC,IAAP,KAAgB;AACxB,YAAMC,OAAO,GAAGD,IAAI,oDACnBxB,MAAM,CAAC0B,aAAP,CAAqBF,IAArB,CADmB,gBACiBxB,MAAM,CAAC0B,aAAP,CAAqBpB,OAAO,CAACkB,IAAD,CAAP,CAAcjB,CAAnC,CADjB,eAC+DP,MAAM,CAAC0B,aAAP,CAAqBpB,OAAO,CAACkB,IAAD,CAAP,CAAchB,CAAnC,CAD/D,SAElB,mBAFF;AAGA,YAAMmB,SAAS,GAAIH,IAAI,IAAIP,UAAT,GAAuB,mBAAvB,GAA6C,cAA/D,CAJwB,CAMxB;;AACA,UAAII,OAAO,GACP;AAAI,QAAA,GAAG,EAAEG,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,OAAO,EAAE,MAAM,KAAKI,MAAL,CAAYJ,IAAZ,CAAvB;AACQ,QAAA,SAAS,EAAEG,SADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAC+BF,OAD/B,CADJ,CADJ,CAPwB,CAcxB;;AACA,UAAI,KAAKpB,KAAL,CAAWc,aAAf,EAA8B;AAC1BG,QAAAA,KAAK,CAACO,IAAN,CAAWR,OAAX;AACH,OAFD,MAGK;AACDC,QAAAA,KAAK,CAACQ,MAAN,CAAa,CAAb,EAAgB,CAAhB,EAAmBT,OAAnB;AACH;AACJ,KArBD;AAuBA,UAAMU,QAAQ,GAAG,KAAK1B,KAAL,CAAWc,aAAX,GAA2B,kBAA3B,GAAgD,kBAAjE;AAEA,WACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACR;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACgB;AAAK,MAAA,GAAG,EAAEa,IAAV;AAAgB,MAAA,SAAS,EAAC,UAA1B;AAAqC,MAAA,GAAG,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADhB,EAEC,oBAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEjB,QAAlB;AAA4B,MAAA,QAAQ,EAAEG,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,EAGgB;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,SAAS,EAAC,iBAAlB;AAAoC,MAAA,OAAO,EAAE,MAAM,KAAKe,cAAL,EAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIF,QAAJ,CAA1E,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,QAAQ,EAAEb,QAAjB;AACQ,MAAA,OAAO,EAAEG,OAAO,CAACZ,OADzB;AAEQ,MAAA,WAAW,EAAE,CAACyB,CAAD,EAAIC,CAAJ,KAAU,KAAKC,WAAL,CAAiBF,CAAjB,EAAoBC,CAApB,CAF/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAFJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKb,KAAL,CADJ,CAPJ,CAHhB,CADQ,CADJ;AAmBH;;AAEDW,EAAAA,cAAc,GAAG;AACb,SAAKI,QAAL,CAAc;AACVlB,MAAAA,aAAa,EAAE,CAAC,KAAKd,KAAL,CAAWc;AADjB,KAAd;AAGH;;AAEDiB,EAAAA,WAAW,CAACE,GAAD,EAAMC,GAAN,EAAW;AAClB,UAAMjC,OAAO,GAAG,KAAKD,KAAL,CAAWC,OAAX,CAAmBkC,KAAnB,CAAyB,CAAzB,EAA4B,KAAKnC,KAAL,CAAWY,UAAX,GAAwB,CAApD,CAAhB;AACA,UAAMI,OAAO,GAAGf,OAAO,CAACA,OAAO,CAACmC,MAAR,GAAiB,CAAlB,CAAvB,CAFkB,CAIlB;;AACA,UAAMhC,OAAO,GAAGiC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAevB,OAAO,CAACZ,OAAvB,CAAX,CAAhB,CALkB,CAOlB;;AACA,UAAMoC,OAAO,GAAG,KAAKxC,KAAL,CAAWU,QAA3B;AARkB,UASXG,QATW,GASC,KAAKb,KATN,CASXa,QATW;;AAWlB,QAAIA,QAAQ,IAAI,IAAZ,IAAoBT,OAAO,CAAC6B,GAAD,CAAP,CAAaC,GAAb,KAAqB,IAA7C,EAAmD;AAE/C;AACA9B,MAAAA,OAAO,CAAC6B,GAAD,CAAP,CAAaC,GAAb,IAAoBM,OAApB,CAH+C,CAK/C;;AACA,UAAI9B,QAAQ,GAAG8B,OAAO,KAAK7C,MAAM,CAACgB,OAAnB,GAA6BhB,MAAM,CAAC8C,OAApC,GAA8C9C,MAAM,CAACgB,OAApE;AAEA,WAAKqB,QAAL,CAAc;AACV/B,QAAAA,OAAO,EAAEA,OAAO,CAACyC,MAAR,CAAe,CAAC;AACrBxC,UAAAA,CAAC,EAAE+B,GADkB;AAErB9B,UAAAA,CAAC,EAAE+B,GAFkB;AAGrB9B,UAAAA;AAHqB,SAAD,CAAf,CADC;AAMVQ,QAAAA,UAAU,EAAEX,OAAO,CAACmC,MANV;AAOV1B,QAAAA,QAPU;AAQVG,QAAAA,QAAQ,EAAE,KAAK8B,QAAL,CAAcV,GAAd,EAAmBC,GAAnB,EAAwBM,OAAxB,EAAiCvC,OAAO,CAACmC,MAAR,GAAiB,CAAlD;AARA,OAAd;AAUH;AACJ;;AAEDb,EAAAA,MAAM,CAACL,IAAD,EACN;AAAA,UACWjB,OADX,GACsB,KAAKD,KAD3B,CACWC,OADX;AAEI,UAAM2C,MAAM,GAAG3C,OAAO,CAACiB,IAAD,CAAtB;AACA,UAAMsB,OAAO,GAAGtB,IAAI,GAAG,CAAP,IAAY,CAAZ,GAAgBvB,MAAM,CAAC8C,OAAvB,GAAiC9C,MAAM,CAACgB,OAAxD;AACA,UAAMD,QAAQ,GAAGQ,IAAI,GAAG,CAAP,IAAY,CAAZ,GAAgBvB,MAAM,CAAC8C,OAAvB,GAAiC9C,MAAM,CAACgB,OAAzD;AAEA,SAAKqB,QAAL,CAAc;AACVpB,MAAAA,UAAU,EAAEM,IADF;AAEVR,MAAAA,QAFU;AAGVG,MAAAA,QAAQ,EAAE,KAAK8B,QAAL,CAAcC,MAAM,CAAC1C,CAArB,EAAwB0C,MAAM,CAACzC,CAA/B,EAAkCqC,OAAlC,EAA2CtB,IAA3C;AAHA,KAAd;AAKH;;AAEDyB,EAAAA,QAAQ,CAACV,GAAD,EAAMC,GAAN,EAAWW,IAAX,EAAiB3B,IAAjB,EAAuB;AAE3B,QAAIA,IAAI,IAAI,CAAZ,EAAe;AACX,aAAO,IAAP;AACH;;AAJ0B,UAMpBjB,OANoB,GAMT,KAAKD,KANI,CAMpBC,OANoB;AAO3B,UAAMe,OAAO,GAAGf,OAAO,CAACiB,IAAD,CAAvB;AACA,UAAMd,OAAO,GAAGY,OAAO,CAACZ,OAAR,CAAgB+B,KAAhB,EAAhB,CAR2B,CAU3B;;AACA,QAAIW,KAAK,GAAGb,GAAZ;AACA,QAAIc,KAAK,GAAGb,GAAZ;AAEA,QAAIc,QAAQ,GAAG,CAAf;AACA,QAAIC,QAAQ,GAAG,CAAf;AACA,QAAIC,iBAAiB,GAAG,CAAxB;AACA,QAAIC,iBAAiB,GAAG,CAAxB;AACA,QAAIC,OAAJ;AACA,QAAIC,KAAK,GAAIR,IAAI,KAAKlD,MAAM,CAACgB,OAAjB,GAA4BhB,MAAM,CAAC8C,OAAnC,GAA6C9C,MAAM,CAACgB,OAAhE,CAnB2B,CAqB3B;;AACAyC,IAAAA,OAAO,GAAG,IAAV;AACA,QAAIE,SAAS,GAAG,EAAhB;;AACA,WAAM,EAAER,KAAF,IAAW,CAAX,IAAgB1C,OAAO,CAAC0C,KAAD,CAAP,CAAeC,KAAf,MAA0BF,IAAhD,EAAsD;AAClDG,MAAAA,QAAQ;AACRM,MAAAA,SAAS,CAAC9B,IAAV,CAAe,CAACsB,KAAD,EAAQC,KAAR,CAAf;AACH;;AACD,QAAID,KAAK,IAAI,CAAT,IAAc1C,OAAO,CAAC0C,KAAD,CAAP,CAAeC,KAAf,MAA0BM,KAA5C,EAAmD;AAC/CD,MAAAA,OAAO,GAAG,KAAV;AACH;;AACDN,IAAAA,KAAK,GAAGb,GAAR;AACAqB,IAAAA,SAAS,CAAC9B,IAAV,CAAe,CAACsB,KAAD,EAAQC,KAAR,CAAf;;AACA,WAAM,EAAED,KAAF,IAAWnD,MAAM,CAACW,OAAP,GAAiB,CAA5B,IAAiCF,OAAO,CAAC0C,KAAD,CAAP,CAAeC,KAAf,MAA0BF,IAAjE,EAAuE;AACnEG,MAAAA,QAAQ;AACRM,MAAAA,SAAS,CAAC9B,IAAV,CAAe,CAACsB,KAAD,EAAQC,KAAR,CAAf;AACH;;AACD,QAAID,KAAK,IAAInD,MAAM,CAACW,OAAP,GAAiB,CAA1B,IAA+BF,OAAO,CAAC0C,KAAD,CAAP,CAAeC,KAAf,MAA0BM,KAA7D,EAAoE;AAChED,MAAAA,OAAO,GAAG,KAAV;AACH;;AACDN,IAAAA,KAAK,GAAGb,GAAR;AACA,QAAImB,OAAO,KAAK,KAAZ,IAAqBJ,QAAQ,IAAI,CAArC,EAAwC,OAAOM,SAAP,CAzCb,CA2C3B;;AACAF,IAAAA,OAAO,GAAG,IAAV;AACAE,IAAAA,SAAS,GAAG,EAAZ;;AACA,WAAM,EAAEP,KAAF,IAAW,CAAX,IAAgB3C,OAAO,CAAC0C,KAAD,CAAP,CAAeC,KAAf,MAA0BF,IAAhD,EAAsD;AAClDI,MAAAA,QAAQ;AACRK,MAAAA,SAAS,CAAC9B,IAAV,CAAe,CAACsB,KAAD,EAAQC,KAAR,CAAf;AACH;;AACD,QAAIA,KAAK,IAAI,CAAT,IAAc3C,OAAO,CAAC0C,KAAD,CAAP,CAAeC,KAAf,MAA0BM,KAA5C,EAAmD;AAC/CD,MAAAA,OAAO,GAAG,KAAV;AACH;;AACDL,IAAAA,KAAK,GAAGb,GAAR;AACAoB,IAAAA,SAAS,CAAC9B,IAAV,CAAe,CAACsB,KAAD,EAAQC,KAAR,CAAf;;AACA,WAAM,EAAEA,KAAF,IAAWpD,MAAM,CAACW,OAAP,GAAiB,CAA5B,IAAiCF,OAAO,CAAC0C,KAAD,CAAP,CAAeC,KAAf,MAA0BF,IAAjE,EAAuE;AACnEI,MAAAA,QAAQ;AACRK,MAAAA,SAAS,CAAC9B,IAAV,CAAe,CAACsB,KAAD,EAAQC,KAAR,CAAf;AACH;;AACD,QAAIA,KAAK,IAAIpD,MAAM,CAACW,OAAP,GAAiB,CAA1B,IAA+BF,OAAO,CAAC0C,KAAD,CAAP,CAAeC,KAAf,MAA0BM,KAA7D,EAAoE;AAChED,MAAAA,OAAO,GAAG,KAAV;AACH;;AACDL,IAAAA,KAAK,GAAGb,GAAR;AACA,QAAIkB,OAAO,KAAK,KAAZ,IAAqBH,QAAQ,IAAI,CAArC,EAAwC,OAAOK,SAAP,CA/Db,CAiE3B;;AACAF,IAAAA,OAAO,GAAG,IAAV;AACAE,IAAAA,SAAS,GAAG,EAAZ;;AACA,WAAM,EAAER,KAAF,IAAW,CAAX,IAAgB,EAAEC,KAAF,IAAW,CAA3B,IAAgC3C,OAAO,CAAC0C,KAAD,CAAP,CAAeC,KAAf,MAA0BF,IAAhE,EAAsE;AAClEK,MAAAA,iBAAiB;AACjBI,MAAAA,SAAS,CAAC9B,IAAV,CAAe,CAACsB,KAAD,EAAQC,KAAR,CAAf;AACH;;AACD,QAAID,KAAK,IAAI,CAAT,IAAcC,KAAK,IAAI,CAAvB,IAA4B3C,OAAO,CAAC0C,KAAD,CAAP,CAAeC,KAAf,MAA0BM,KAA1D,EAAiE;AAC7DD,MAAAA,OAAO,GAAG,KAAV;AACH;;AACDN,IAAAA,KAAK,GAAGb,GAAR;AACAc,IAAAA,KAAK,GAAGb,GAAR;AACAoB,IAAAA,SAAS,CAAC9B,IAAV,CAAe,CAACsB,KAAD,EAAQC,KAAR,CAAf;;AACA,WAAM,EAAED,KAAF,IAAWnD,MAAM,CAACW,OAAP,GAAiB,CAA5B,IAAiC,EAAEyC,KAAF,IAAWpD,MAAM,CAACW,OAAP,GAAiB,CAA7D,IAAkEF,OAAO,CAAC0C,KAAD,CAAP,CAAeC,KAAf,MAA0BF,IAAlG,EAAwG;AACpGK,MAAAA,iBAAiB;AACjBI,MAAAA,SAAS,CAAC9B,IAAV,CAAe,CAACsB,KAAD,EAAQC,KAAR,CAAf;AACH;;AACD,QAAID,KAAK,IAAInD,MAAM,CAACW,OAAP,GAAiB,CAA1B,IAA+ByC,KAAK,IAAIpD,MAAM,CAACW,OAAP,GAAiB,CAAzD,IAA8DF,OAAO,CAAC0C,KAAD,CAAP,CAAeC,KAAf,MAA0BM,KAA5F,EAAmG;AAC/FD,MAAAA,OAAO,GAAG,KAAV;AACH;;AACDN,IAAAA,KAAK,GAAGb,GAAR;AACAc,IAAAA,KAAK,GAAGb,GAAR;AACA,QAAIkB,OAAO,KAAK,KAAZ,IAAqBF,iBAAiB,IAAI,CAA9C,EAAiD,OAAOI,SAAP,CAvFtB,CAyF3B;;AACAF,IAAAA,OAAO,GAAG,IAAV;AACAE,IAAAA,SAAS,GAAG,EAAZ;;AACA,WAAM,EAAER,KAAF,IAAW,CAAX,IAAgB,EAAEC,KAAF,IAAW,CAA3B,IAAgC3C,OAAO,CAAC0C,KAAD,CAAP,CAAeC,KAAf,MAA0BF,IAAhE,EAAsE;AAClEM,MAAAA,iBAAiB;AACjBG,MAAAA,SAAS,CAAC9B,IAAV,CAAe,CAACsB,KAAD,EAAQC,KAAR,CAAf;AACH;;AACD,QAAID,KAAK,IAAI,CAAT,IAAcC,KAAK,IAAI,CAAvB,IAA4B3C,OAAO,CAAC0C,KAAD,CAAP,CAAeC,KAAf,MAA0BM,KAA1D,EAAiE;AAC7DD,MAAAA,OAAO,GAAG,KAAV;AACH;;AACDN,IAAAA,KAAK,GAAGb,GAAR;AACAc,IAAAA,KAAK,GAAGb,GAAR;AACAoB,IAAAA,SAAS,CAAC9B,IAAV,CAAe,CAACsB,KAAD,EAAQC,KAAR,CAAf;;AACA,WAAM,EAAED,KAAF,IAAWnD,MAAM,CAACW,OAAP,GAAiB,CAA5B,IAAiC,EAAEyC,KAAF,IAAWpD,MAAM,CAACW,OAAP,GAAiB,CAA7D,IAAkEF,OAAO,CAAC0C,KAAD,CAAP,CAAeC,KAAf,MAA0BF,IAAlG,EAAwG;AACpGM,MAAAA,iBAAiB;AACjBG,MAAAA,SAAS,CAAC9B,IAAV,CAAe,CAACsB,KAAD,EAAQC,KAAR,CAAf;AACH;;AACD,QAAID,KAAK,IAAInD,MAAM,CAACW,OAAP,GAAiB,CAA1B,IAA+ByC,KAAK,IAAIpD,MAAM,CAACW,OAAP,GAAiB,CAAzD,IAA8DF,OAAO,CAAC0C,KAAD,CAAP,CAAeC,KAAf,MAA0BM,KAA5F,EAAmG;AAC/FD,MAAAA,OAAO,GAAG,KAAV;AACH;;AACD,QAAIA,OAAO,KAAK,KAAZ,IAAqBD,iBAAiB,IAAI,CAA9C,EAAiD,OAAOG,SAAP;AAEjD,WAAO,IAAP;AACH;;AA1OwB;;AA6O7B,eAAezD,IAAf","sourcesContent":["import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport Status from './Status';\nimport Config from './Config';\nimport Board from './Board';\nimport './css/Game.css';\n\nclass Game extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                x: null,\n                y: null,\n                squares: Array(Config.brdSize).fill(null).map(a => { return Array(Config.brdSize).fill(null)})\n            }],\n            nextMove: Config.xPlayer,\n            stepNumber: 0,\n            winCells: null,\n            accendingMode: true\n        }\n    }\n\n    render() {\n        const {history} = this.state;\n        const {stepNumber} = this.state;\n        const current = history[stepNumber];\n        const {nextMove} = this.state;\n        const {winCells} = this.state;\n\n        let moves = [];\n        history.map((step, move) => {\n            const content = move ? `Đến bước thứ #${\n             Config.makeTwoDigits(move)  }: (${  Config.makeTwoDigits(history[move].x)  }, ${  Config.makeTwoDigits(history[move].y)  })`\n            : \"Chơi lại từ đầu !\";\n            const className = (move == stepNumber) ? \"board-button-bold\" : \"board-button\";\n            \n            // Get current move\n            let current = (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}\n                            className={className}>{content}</button>\n                </li>\n            )\n\n            // Push head or tail depends on sort mode\n            if (this.state.accendingMode) {\n                moves.push(current);\n            }\n            else {\n                moves.splice(0, 0, current);\n            }\n        })\n\n        const sortMode = this.state.accendingMode ? \"Nước đi tăng dần\" : \"Nước đi giảm dần\";\n\n        return (\n            <div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t\t<Status nextMove={nextMove} winCells={winCells} />\n                    <div className=\"board-game\">\n                        <button className=\"function-button\" onClick={() => this.changeSortMode()}><b>{sortMode}</b></button>\n                        <div>\n                            <Board winCells={winCells}\n                                    squares={current.squares}\n                                    handleClick={(i, j) => this.handleClick(i, j)} />\n                        </div>\n                        <div>\n                            <ol>{moves}</ol>\n                        </div>\n                    </div>\n\t\t\t\t</header>\n            </div>\n        );\n    }\n\n    changeSortMode() {\n        this.setState({\n            accendingMode: !this.state.accendingMode\n        })\n    }\n\n    handleClick(row, col) {      \n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n\n        // Attention: Slice does not work properly with 2D array\n        const squares = JSON.parse(JSON.stringify(current.squares));\n\n        // It should be named 'curMove'\n        const curMove = this.state.nextMove;\n        const {winCells} = this.state;\n\n        if (winCells == null && squares[row][col] == null) {\n\n            // Assign value\n            squares[row][col] = curMove;\n\n            // Update next move\n            let nextMove = curMove === Config.xPlayer ? Config.oPlayer : Config.xPlayer;\n\n            this.setState({\n                history: history.concat([{\n                    x: row,\n                    y: col,\n                    squares\n                }]),\n                stepNumber: history.length,\n                nextMove,\n                winCells: this.checkWin(row, col, curMove, history.length - 1)\n            });\n        }\n    }\n\n    jumpTo(step)\n    {\n        const {history} = this.state;\n        const target = history[step];\n        const curMove = step % 2 == 0 ? Config.oPlayer : Config.xPlayer;\n        const nextMove = step % 2 != 0 ? Config.oPlayer : Config.xPlayer;\n\n        this.setState({\n            stepNumber: step,\n            nextMove,\n            winCells: this.checkWin(target.x, target.y, curMove, step)\n        })\n    }\n\n    checkWin(row, col, user, step) {\n\n        if (step == 0) {\n            return null;\n        }\n\n        const {history} = this.state;\n        const current = history[step];\n        const squares = current.squares.slice();\n\n        // Get coordinates\n        let coorX = row;\n        let coorY = col;\n \n        let countCol = 1;\n        let countRow = 1;\n        let countMainDiagonal = 1;\n        let countSkewDiagonal = 1;\n        let isBlock;\n        let rival = (user === Config.xPlayer) ? Config.oPlayer : Config.xPlayer;\n \n        // Check col\n        isBlock = true;\n        let win_cells = [];\n        while(--coorX >= 0 && squares[coorX][coorY] === user) {\n            countCol++;\n            win_cells.push([coorX, coorY]);\n        }\n        if (coorX >= 0 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        coorX = row;\n        win_cells.push([coorX, coorY]);\n        while(++coorX <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n            countCol++;\n            win_cells.push([coorX, coorY]);\n        }\n        if (coorX <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        coorX = row;\n        if (isBlock === false && countCol >= 5) return win_cells;\n \n        // Check row\n        isBlock = true;\n        win_cells = [];\n        while(--coorY >= 0 && squares[coorX][coorY] === user) {\n            countRow++;\n            win_cells.push([coorX, coorY]);\n        }\n        if (coorY >= 0 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        coorY = col;\n        win_cells.push([coorX, coorY]);\n        while(++coorY <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n            countRow++;\n            win_cells.push([coorX, coorY]);\n        }\n        if (coorY <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        coorY = col;\n        if (isBlock === false && countRow >= 5) return win_cells;\n\n        // Check main diagonal\n        isBlock = true;\n        win_cells = [];\n        while(--coorX >= 0 && --coorY >= 0 && squares[coorX][coorY] === user) {\n            countMainDiagonal++;\n            win_cells.push([coorX, coorY]);\n        }\n        if (coorX >= 0 && coorY >= 0 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        coorX = row;\n        coorY = col;\n        win_cells.push([coorX, coorY]);\n        while(++coorX <= Config.brdSize - 1 && ++coorY <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n            countMainDiagonal++;\n            win_cells.push([coorX, coorY]);\n        }\n        if (coorX <= Config.brdSize - 1 && coorY <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        coorX = row;\n        coorY = col;\n        if (isBlock === false && countMainDiagonal >= 5) return win_cells;\n\n        // Check skew diagonal\n        isBlock = true;\n        win_cells = [];\n        while(--coorX >= 0 && ++coorY >= 0 && squares[coorX][coorY] === user) {\n            countSkewDiagonal++;\n            win_cells.push([coorX, coorY]);\n        }\n        if (coorX >= 0 && coorY >= 0 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        coorX = row;\n        coorY = col;\n        win_cells.push([coorX, coorY]);\n        while(++coorX <= Config.brdSize - 1 && --coorY <= Config.brdSize - 1 && squares[coorX][coorY] === user) {\n            countSkewDiagonal++;\n            win_cells.push([coorX, coorY]);\n        }\n        if (coorX <= Config.brdSize - 1 && coorY <= Config.brdSize - 1 && squares[coorX][coorY] !== rival) {\n            isBlock = false;\n        }\n        if (isBlock === false && countSkewDiagonal >= 5) return win_cells;\n\n        return null;\n    }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}